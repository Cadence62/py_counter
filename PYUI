class Calculator:
    def operator(self, token):
        if token == '+':
            return lambda x,y:y+x
        elif token == '-':
            return lambda x,y:y-x
        elif token == '*':
            return lambda x,y:y*x
        elif token == '/':
            return lambda x,y:int(y/x)
        else:
            return None
    # @param tokens, a list of string
    # @return an integer
    def evalRPN(self, tokens):
        stack = []
        for token in tokens:
            op = self.operator(token)
            if op != None:
                stack.append(op(stack.pop(), stack.pop()))
            else:
                #assume all non-op are int
                stack.append(int(token))
            print(stack)
        if len(stack) != 1:
            raise ValueError("Unexpected stack length:%d" % len(stack))
        return stack.pop()

if __name__ == '__main__':
    x = Calculator()
    print(x.evalRPN(["2", "1", "+", "3", "*"]))
    print(x.evalRPN(["4", "13", "5", "/", "+"]))
    print(x.evalRPN(["10","6","9","3","+","-11","*","/","*","17","+","5","+"]))